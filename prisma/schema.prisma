 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  password String 
  firstName String
  lastName String 
  profile_image String  @default(value: "default_sender_image_url")
  dateOfBirth DateTime
  address String 
  city String 
  country String 
  postalCode String
  phoneNumber String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
  chatsAsSender ChatMessages[] @relation(name: "Sender")
  chatsAsReceiver ChatMessages[] @relation(name: "Receiver") 
  senderChats Chat[] @relation("SenderChats")
  receiverChats Chat[] @relation("ReceiverChats")
 
}

model Admin {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  password String 
  firstName String
  lastName String 
  dateOfBirth DateTime
   profile_image String?
  address String 
  city String 
  country String 
  postalCode String
  phoneNumber String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  title String
  body String
  latitude Float    @default(00.000)
  longitude Float @default(00.000)
  address String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  chats Chat[]  
}

model Otp {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  receiver_id String 
  otp Int
  email String
  status String @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessages{
 id String @id @default(auto()) @map("_id") @db.ObjectId
 sender User @relation(name:"Sender", fields: [senderId], references: [id])
 senderId String
 receiver User @relation(name:"Receiver",fields: [receiverId], references: [id])
 receiverId String 
 body String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 chat Chat @relation(fields: [chatId], references: [id])
 chatId String
}

 model Chat {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 sender User @relation("SenderChats", fields: [senderId], references: [id])
 senderId String
 receiver User @relation("ReceiverChats", fields: [receiverId], references: [id])
 receiverId String
 post Post @relation(fields: [postId], references: [id])
 postId String
 messages ChatMessages[] 
 senderProfileImage String @default(value: "default_sender_image_url")
 receiverProfileImage String @default(value: "default_receiver_image_url")
 senderFirstName String
 senderLastName String
 receiverFirstName String
 receiverLastName String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}